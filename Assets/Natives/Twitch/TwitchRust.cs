// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;

namespace RawNative
{
    internal static unsafe partial class RawTwitch
    {
#if !UNITY_EDITOR
        const string __DllName = "Cookin Ynah The Food Fighter_Data/Plugins/x86_64/libtwitch_irc.dll";
#else
        const string __DllName = "Assets/Plugins/Twitch/libtwitch_irc.dll";
#endif
        

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void init_runtime_callback_delegate(byte* msg, int identifier);

        [DllImport(__DllName, EntryPoint = "init_runtime", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* init_runtime(int identifier, init_runtime_callback_delegate callback);

        [DllImport(__DllName, EntryPoint = "free_handle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_handle(void* handle);

        /// <summary>Joins a twitch channel with the provided name # Safety - Please use the provided binding for the C# file. - If you want a custom implementation, `s_ptr` is the location of the string ptr, while s_len will be the length. - Take note that this does not include the null character at the end. - Don't forget to put the void* reference first - The passed string must be UTF-16 encoded, if not, there might be undefined behavior # Examples C# code to bind with the function ```ignore var str = \"koolieaid\"; fixed (char* p = str) { RawTwitch.join_channel(runtime, (ushort*)p, str.Length); } ```</summary>
        [DllImport(__DllName, EntryPoint = "join_channel", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void join_channel(void* ctx, ushort* s_ptr, int s_len);

        /// <summary>Frees the string that was pass to the current program from the library # Safety **string** must be a pointer passed down by void (*fn)(const char*). It must also be from Rust, not any other language</summary>
        [DllImport(__DllName, EntryPoint = "free_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_string(byte* @string);


    }



}
    